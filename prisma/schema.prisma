// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

enum JobStatus {
  ACTIVE
  CLOSED
  DRAFT
}

enum ApplicationStatus {
  APPLIED
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum DocumentType {
  RESUME
  LICENSE
  CERTIFICATION
  OTHER
}

model User {
  id                Int               @id @default(autoincrement())
  firstName         String
  lastName          String
  dob               DateTime?
  gender            String
  contactNumber     String
  email             String            @unique
  address           String
  role              Role              @default(USER)
  password          String
  licenseNumber     String?
  licenseExpiration DateTime?
  yearsOfExperience Int?
  education         String?
  certifications    String[]          @default([]) // Add this line
  specializations   String[]          @default([])
  languages         String[]          @default([])
  shiftPreferences  String[]          @default([])
  bio               String?
  skills            Skill[]           @relation("UserSkills")
  experiences       Experience[]
  documents         Document[]
  applications      Application[]
  notifications     Notification[]
  shifts            Shift[]
  profilePictureUrl String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([role])
}

// Skill Model - Represents Skills that Users have and Jobs require
model Skill {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  users  User[]  @relation("UserSkills")
  jobs   Job[]   @relation("JobSkills")
}

// Job Model - Represents Job Postings Created by Admins
model Job {
  id             Int            @id @default(autoincrement())
  title          String
  description    String
  facility       String
  department     String
  shiftType      String
  startDateTime  DateTime
  endDateTime    DateTime
  payRate        String
  urgent         Boolean        @default(false)
  status         JobStatus      @default(ACTIVE)
  requiredSkills Skill[]        @relation("JobSkills")
  applications   Application[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([status, startDateTime])
}

// Application Model - Represents Applications Submitted by Nurses
model Application {
  id            Int               @id @default(autoincrement())
  user          User              @relation(fields: [userId], references: [id])
  userId        Int
  job           Job               @relation(fields: [jobId], references: [id])
  jobId         Int
  status        ApplicationStatus @default(APPLIED)
  matchingScore Int
  appliedAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@unique([userId, jobId])
}

// Notification Model - Represents Notifications for Users
model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  timestamp DateTime @default(now())

  @@index([userId, timestamp])
}

// Shift Model - Represents Upcoming Shifts for Users
model Shift {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  facility  String
  date      DateTime
  time      String // e.g., "7:00 AM - 7:00 PM"

  @@index([userId, date])
}

// Experience Model - Represents Work Experiences of Users
model Experience {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  facilityName    String
  position        String
  department      String
  startDate       DateTime?
  endDate         DateTime?
  responsibilities String

  @@index([userId, facilityName])
}

// Document Model - Represents Documents Uploaded by Users
model Document {
  id         Int          @id @default(autoincrement())
  user       User         @relation(fields: [userId], references: [id])
  userId     Int
  type       DocumentType
  fileUrl    String       // URL or path to the uploaded document
  uploadedAt DateTime     @default(now())

  @@index([userId, type])
}
