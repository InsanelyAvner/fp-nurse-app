// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

enum Role {
  ADMIN
  USER
}

enum JobStatus {
  ACTIVE
  CLOSED
  DRAFT
}

enum ApplicationStatus {
  APPLIED
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum Specialization {
  COMMUNITY_HEALTH
  CRITICAL_CARE
  GERONTOLOGY
  EMERGENCY
}

model User {
  id                    Int                 @id @default(autoincrement())
  firstName             String
  lastName              String
  dob                   DateTime?
  gender                String
  contactNumber         String
  email                 String              @unique
  postalCode            String
  citizenship           String
  race                  String
  role                  Role                @default(USER)
  password              String
  specialization        Specialization
  availableWorkDays     String
  frequencyOfWork       Int
  preferredFacilityType String
  availableWorkTiming   String
  experiences           Experience[]
  applications          Application[]
  notifications         Notification[]
  shifts                Shift[]
  skills                Skill[]             @relation("UserSkills")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@index([role])
}

model Job {
  id             Int            @id @default(autoincrement())
  title          String
  description    String
  facility       String
  department     String
  shiftType      String
  startDateTime  DateTime
  endDateTime    DateTime
  payRate        String
  urgent         Boolean        @default(false)
  status         JobStatus      @default(ACTIVE)
  applications   Application[]
  requiredSkills Skill[]         @relation("JobSkills")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([status, startDateTime])
}

model Application {
  id            Int               @id @default(autoincrement())
  user          User              @relation(fields: [userId], references: [id])
  userId        Int
  job           Job               @relation(fields: [jobId], references: [id])
  jobId         Int
  status        ApplicationStatus @default(APPLIED)
  matchingScore Int
  appliedAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@unique([userId, jobId], name: "user_job_unique")
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  timestamp DateTime @default(now())

  @@index([userId, timestamp])
}

model Shift {
  id                    Int       @id @default(autoincrement())
  user                  User      @relation(fields: [userId], references: [id])
  userId                Int
  facility              String
  startDate             DateTime
  endDate               DateTime
  startTime             String
  endTime               String
  mealBreak             Boolean
  assignedDepartment    String
  assignedSupervisor    String
  supervisorRating      Int
  commentsOnPerformance String
  recommendToRehire     Boolean
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([userId, startDate])
}

model Experience {
  id               Int       @id @default(autoincrement())
  user             User      @relation(fields: [userId], references: [id])
  userId           Int
  facilityName     String
  position         String
  department       String
  startDate        DateTime?
  endDate          DateTime?
  responsibilities String

  @@index([userId, facilityName])
}

model Skill {
  id    Int    @id @default(autoincrement())
  name  String @unique
  jobs  Job[]  @relation("JobSkills")
  users User[] @relation("UserSkills")
}
